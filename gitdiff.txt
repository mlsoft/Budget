diff --git a/.idea/gradle.xml b/.idea/gradle.xml
index 1bbc21d..78a2fa3 100644
--- a/.idea/gradle.xml
+++ b/.idea/gradle.xml
@@ -12,6 +12,12 @@
             <option value="$PROJECT_DIR$/app" />
           </set>
         </option>
+        <option name="myModules">
+          <set>
+            <option value="$PROJECT_DIR$" />
+            <option value="$PROJECT_DIR$/app" />
+          </set>
+        </option>
       </GradleProjectSettings>
     </option>
   </component>
diff --git a/.idea/vcs.xml b/.idea/vcs.xml
index 6564d52..94a25f7 100644
--- a/.idea/vcs.xml
+++ b/.idea/vcs.xml
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
   <component name="VcsDirectoryMappings">
-    <mapping directory="" vcs="" />
+    <mapping directory="$PROJECT_DIR$" vcs="Git" />
   </component>
 </project>
\ No newline at end of file
diff --git a/app/build.gradle b/app/build.gradle
index 83c7c88..1839197 100644
--- a/app/build.gradle
+++ b/app/build.gradle
@@ -1,9 +1,14 @@
 apply plugin: 'com.android.application'
 
 android {
+    signingConfigs {
+        config {
+            keyAlias 'mlsoft'
+            keyPassword 'password'
+        }
+    }
     compileSdkVersion 23
     buildToolsVersion "23.0.2"
-
     defaultConfig {
         applicationId "net.ddns.mlsoftlaberge.budget"
         minSdkVersion 15
diff --git a/app/src/main/java/net/ddns/mlsoftlaberge/budget/MainActivity.java b/app/src/main/java/net/ddns/mlsoftlaberge/budget/MainActivity.java
index 2cb07f9..52090dc 100644
--- a/app/src/main/java/net/ddns/mlsoftlaberge/budget/MainActivity.java
+++ b/app/src/main/java/net/ddns/mlsoftlaberge/budget/MainActivity.java
@@ -21,6 +21,7 @@ import net.ddns.mlsoftlaberge.budget.notes.NotesFragment;
 import net.ddns.mlsoftlaberge.budget.products.ProductDetailFragment;
 import net.ddns.mlsoftlaberge.budget.products.ProductsListFragment;
 import net.ddns.mlsoftlaberge.budget.sensors.SensorFragment;
+import net.ddns.mlsoftlaberge.budget.sensors.DiscussionFragment;
 import net.ddns.mlsoftlaberge.budget.utils.BudgetFragment;
 
 public class MainActivity extends AppCompatActivity
@@ -66,7 +67,7 @@ public class MainActivity extends AppCompatActivity
         navigationView.setNavigationItemSelectedListener(this);
 
         // initiate the first menu item as auto-selected
-        sensorfragment();
+        discussionfragment();
     }
 
     @Override
@@ -117,6 +118,8 @@ public class MainActivity extends AppCompatActivity
             notesfragment();
         } else if (id == R.id.nav_sensor) {
             sensorfragment();
+        } else if (id == R.id.nav_discussion) {
+            discussionfragment();
         } else if (id == R.id.nav_budget) {
             budgetfragment();
         } else if (id == R.id.nav_contactslist) {
@@ -143,6 +146,7 @@ public class MainActivity extends AppCompatActivity
     private NotesFragment notesFragment = null;
     private BudgetFragment budgetFragment = null;
     private SensorFragment sensorFragment = null;
+    private DiscussionFragment discussionFragment = null;
     private ContactsListFragment contactslistFragment = null;
     private ContactAdminFragment contactadminFragment = null;
     private ProductsListFragment inventoryFragment = null;
@@ -356,5 +360,25 @@ public class MainActivity extends AppCompatActivity
     }
 
 
+    // =====================================================================================
+    // sensor fragment incorporation in the display
+    public void discussionfragment() {
+        setTitle("Discussion Fragment");
+
+        if (discussionFragment == null) {
+            // Create a new Fragment to be placed in the activity layout
+            discussionFragment = new DiscussionFragment();
+            // In case this activity was started with special instructions from an
+            // Intent, pass the Intent's extras to the fragment as arguments
+            discussionFragment.setArguments(getIntent().getExtras());
+        }
+
+        // Add the fragment to the 'fragment_container' FrameLayout
+        getSupportFragmentManager().beginTransaction()
+                .replace(R.id.main_content, discussionFragment).commit();
+        currentfragment = 8;
+    }
+
+
 
 }
diff --git a/app/src/main/java/net/ddns/mlsoftlaberge/budget/sensors/DiscussionFragment.java b/app/src/main/java/net/ddns/mlsoftlaberge/budget/sensors/DiscussionFragment.java
index c84b484..765ce8c 100644
--- a/app/src/main/java/net/ddns/mlsoftlaberge/budget/sensors/DiscussionFragment.java
+++ b/app/src/main/java/net/ddns/mlsoftlaberge/budget/sensors/DiscussionFragment.java
@@ -1,7 +1,167 @@
 package net.ddns.mlsoftlaberge.budget.sensors;
 
+import android.app.Dialog;
+import android.content.Context;
+import android.content.Intent;
+import android.net.ConnectivityManager;
+import android.net.NetworkInfo;
+import android.os.Bundle;
+import android.os.SystemClock;
+import android.speech.RecognitionListener;
+import android.speech.RecognizerIntent;
+import android.speech.SpeechRecognizer;
+import android.speech.tts.TextToSpeech;
+import android.support.v4.app.Fragment;
+import android.view.LayoutInflater;
+import android.view.View;
+import android.view.ViewGroup;
+import android.widget.Button;
+import android.widget.ListView;
+import android.widget.TextView;
+import android.widget.Toast;
+
+import net.ddns.mlsoftlaberge.budget.R;
+
+import java.util.ArrayList;
+import java.util.Locale;
+
 /**
- * Created by mlsoft on 09/04/16.
+ * Created by mlsoft on 05/04/16.
  */
-public class DiscussionFragment {
+public class DiscussionFragment extends Fragment implements RecognitionListener {
+
+    private static final int REQUEST_CODE = 1234;
+    Button Start;
+    TextView Speech;
+    TextView Discussion;
+    ArrayList<String> matches_text;
+    TextToSpeech t1;
+    StringBuffer discuss;
+
+    public DiscussionFragment() {
+    }
+
+    @Override
+    public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
+        View view=inflater.inflate(R.layout.sensor_fragment, container, false);
+
+        Start = (Button) view.findViewById(R.id.start_rec);
+        Speech = (TextView) view.findViewById(R.id.speech);
+        Discussion = (TextView) view.findViewById(R.id.discussion);
+        discuss=new StringBuffer();
+
+        t1 = new TextToSpeech(getContext(), new TextToSpeech.OnInitListener() {
+            @Override
+            public void onInit(int status) {
+                if (status != TextToSpeech.ERROR) {
+                    t1.setLanguage(Locale.FRENCH);
+                }
+            }
+        });
+
+        Start.setOnClickListener(new View.OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                listen();
+            }
+        });
+
+        return view;
+    }
+
+    public void speak() {
+        String toSpeak = Speech.getText().toString();
+        Toast.makeText(getContext(), toSpeak, Toast.LENGTH_SHORT).show();
+        t1.speak(toSpeak, TextToSpeech.QUEUE_FLUSH, null);
+        while(t1.isSpeaking()) {
+            SystemClock.sleep(100);
+        }
+        SystemClock.sleep(500);
+    }
+
+
+    public void listen() {
+        if (isConnected()) {
+            Intent intent = new Intent(RecognizerIntent.ACTION_RECOGNIZE_SPEECH);
+            //Intent intent = new Intent(RecognizerIntent.ACTION_VOICE_SEARCH_HANDS_FREE);
+            intent.putExtra(RecognizerIntent.EXTRA_LANGUAGE_MODEL, RecognizerIntent.LANGUAGE_MODEL_FREE_FORM);
+            startActivityForResult(intent, REQUEST_CODE);
+        } else {
+            Toast.makeText(getActivity(), "Please Connect to Internet", Toast.LENGTH_LONG).show();
+        }
+    }
+
+    public boolean isConnected() {
+        ConnectivityManager cm = (ConnectivityManager) getActivity().getSystemService(Context.CONNECTIVITY_SERVICE);
+        NetworkInfo net = cm.getActiveNetworkInfo();
+        if (net != null && net.isAvailable() && net.isConnected()) {
+            return true;
+        } else {
+            return false;
+        }
+    }
+
+    @Override
+    public void onActivityResult(int requestCode, int resultCode, Intent data) {
+        if (requestCode == REQUEST_CODE && resultCode == getActivity().RESULT_OK) {
+
+            matches_text = data.getStringArrayListExtra(RecognizerIntent.EXTRA_RESULTS);
+
+            Speech.setText(matches_text.get(0));
+
+            processvoice(matches_text.get(0));
+
+            speak();
+
+            listen();
+
+        }
+        super.onActivityResult(requestCode, resultCode, data);
+
+    }
+
+    public void processvoice(String voice) {
+        if(voice.contains("test")) {
+            Speech.setText("moi aussi je test");
+        }
+        else if(voice.contains("fuck")) {
+            Speech.setText("tu peux te le mettre dans le cul");
+        }
+        else if(voice.contains("phoque")) {
+            Speech.setText("sa vaut pas la peine de laisser ceux qu'on aime");
+        }
+        else if(voice.contains("merci")) {
+            Speech.setText("bienvenue maître");
+        }
+        else if(voice.contains("je m'appelle")) {
+            String monnom = voice.substring(voice.lastIndexOf(' ')+1);
+            Speech.setText("enchanté de te connaitre " + monnom);
+        }
+        else if(voice.contains("identifie")) {
+            String monnom = voice.substring(voice.lastIndexOf(' ')+1);
+            if(monnom.contains("Jacinthe")) {
+                Speech.setText(monnom + " est mon namie");
+            } else if(monnom.contains("Martin")) {
+                Speech.setText(monnom + " est mon maître" );
+            } else if(monnom.contains("Guy")) {
+                Speech.setText(monnom + " est pas mal phoqué" );
+            } else if(monnom.contains("Pierre")) {
+                Speech.setText(monnom + " est en prison" );
+            } else {
+                Speech.setText("Je ne connais pas " + monnom);
+            }
+        }
+        else if(voice.contains("quitter")) {
+            getActivity().finish();
+        }
+        else {
+            // faire de quoi par défaut
+        }
+        discuss.append(voice);
+        discuss.append("\n");
+        discuss.append(Speech.getText());
+        discuss.append("\n");
+        Discussion.setText(discuss);
+    }
+
 }
diff --git a/app/src/main/java/net/ddns/mlsoftlaberge/budget/sensors/SensorFragment.java b/app/src/main/java/net/ddns/mlsoftlaberge/budget/sensors/SensorFragment.java
index 68bf059..8f72c24 100644
--- a/app/src/main/java/net/ddns/mlsoftlaberge/budget/sensors/SensorFragment.java
+++ b/app/src/main/java/net/ddns/mlsoftlaberge/budget/sensors/SensorFragment.java
@@ -6,6 +6,7 @@ import android.content.Intent;
 import android.net.ConnectivityManager;
 import android.net.NetworkInfo;
 import android.os.Bundle;
+import android.os.SystemClock;
 import android.speech.RecognizerIntent;
 import android.speech.tts.TextToSpeech;
 import android.support.v4.app.Fragment;
@@ -33,6 +34,7 @@ public class SensorFragment extends Fragment {
     TextView Discussion;
     ArrayList<String> matches_text;
     TextToSpeech t1;
+    StringBuffer discuss;
 
     public SensorFragment() {
     }
@@ -44,6 +46,7 @@ public class SensorFragment extends Fragment {
         Start = (Button) view.findViewById(R.id.start_rec);
         Speech = (TextView) view.findViewById(R.id.speech);
         Discussion = (TextView) view.findViewById(R.id.discussion);
+        discuss=new StringBuffer();
 
         t1 = new TextToSpeech(getContext(), new TextToSpeech.OnInitListener() {
             @Override
@@ -68,6 +71,10 @@ public class SensorFragment extends Fragment {
         String toSpeak = Speech.getText().toString();
         Toast.makeText(getContext(), toSpeak, Toast.LENGTH_SHORT).show();
         t1.speak(toSpeak, TextToSpeech.QUEUE_FLUSH, null);
+        while(t1.isSpeaking()) {
+            SystemClock.sleep(100);
+        }
+        SystemClock.sleep(500);
     }
 
 
@@ -100,9 +107,59 @@ public class SensorFragment extends Fragment {
 
             Speech.setText(matches_text.get(0));
 
+            processvoice(matches_text.get(0));
+
             speak();
+
+            listen();
+
         }
         super.onActivityResult(requestCode, resultCode, data);
+
+    }
+
+    public void processvoice(String voice) {
+        if(voice.contains("test")) {
+            Speech.setText("moi aussi je test");
+        }
+        else if(voice.contains("fuck")) {
+            Speech.setText("tu peux te le mettre dans le cul");
+        }
+        else if(voice.contains("phoque")) {
+            Speech.setText("sa vaut pas la peine de laisser ceux qu'on aime");
+        }
+        else if(voice.contains("merci")) {
+            Speech.setText("bienvenue maître");
+        }
+        else if(voice.contains("je m'appelle")) {
+            String monnom = voice.substring(voice.lastIndexOf(' ')+1);
+            Speech.setText("enchanté de te connaitre " + monnom);
+        }
+        else if(voice.contains("identifie")) {
+            String monnom = voice.substring(voice.lastIndexOf(' ')+1);
+            if(monnom.contains("Jacinthe")) {
+                Speech.setText(monnom + " est mon namie");
+            } else if(monnom.contains("Martin")) {
+                    Speech.setText(monnom + " est mon maître" );
+            } else if(monnom.contains("Guy")) {
+                Speech.setText(monnom + " est pas mal phoqué" );
+            } else if(monnom.contains("Pierre")) {
+                Speech.setText(monnom + " est en prison" );
+            } else {
+                Speech.setText("Je ne connais pas " + monnom);
+            }
+        }
+        else if(voice.contains("quitter")) {
+            getActivity().finish();
+        }
+        else {
+            // faire de quoi par défaut
+        }
+        discuss.append(voice);
+        discuss.append("\n");
+        discuss.append(Speech.getText());
+        discuss.append("\n");
+        Discussion.setText(discuss);
     }
 
 }
diff --git a/app/src/main/res/menu/activity_main_drawer.xml b/app/src/main/res/menu/activity_main_drawer.xml
index 0afcbe9..5b8c71e 100644
--- a/app/src/main/res/menu/activity_main_drawer.xml
+++ b/app/src/main/res/menu/activity_main_drawer.xml
@@ -3,6 +3,10 @@
 
     <group android:checkableBehavior="single">
         <item
+            android:id="@+id/nav_discussion"
+            android:icon="@drawable/ic_menu_camera"
+            android:title="Discussion" />
+        <item
             android:id="@+id/nav_sensor"
             android:icon="@drawable/ic_menu_camera"
             android:title="Sensor" />
diff --git a/build.gradle b/build.gradle
index e0b366a..168f129 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,7 +5,7 @@ buildscript {
         jcenter()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.5.0'
+        classpath 'com.android.tools.build:gradle:2.0.0'
 
         // NOTE: Do not place your application dependencies here; they belong
         // in the individual module build.gradle files
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index f23df6e..d24356d 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Wed Oct 21 11:34:03 PDT 2015
+#Fri Apr 08 15:56:34 EDT 2016
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.8-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.10-all.zip
